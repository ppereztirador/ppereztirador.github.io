{"version":3,"sources":["index.js"],"names":["getBitRandomAsync","i","a","xhr","XMLHttpRequest","Promise","resolve","reject","onreadystatechange","readyState","Status","status","tBin","responseText","toString","trim","split","map","x","open","send","getDeckRandomAsync","tInt","parseInt","Card","props","name","cardNo","isUp","src","alt","height","Board","this","isToken","class","renderCard","renderToken","React","Component","TarotRead","state","Array","fill","tokenNo","timeRnd","randomthings","setState","tokenList","cardList","upList","tokenCard","alert","binaryList","randomList","console","log","typeToken","positionToken","randomListIdx","type","onClick","startReading","restartBoard","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8e56d21a.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nasync function getBitRandomAsync(i) {\r\n\tvar xhr = new XMLHttpRequest();\r\n\treturn new Promise (function(resolve, reject) {\r\n\t\t\r\n\t\txhr.onreadystatechange = function() {\r\n\t\t\tif (xhr.readyState == 4) {\r\n\t\t\t\tif (xhr.Status >= 300) {\r\n\t\t\t\t\treject(\"Error, status code = \" + xhr.status)\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet tSplit = xhr.responseText.toString().trim().split(\"\\n\");\r\n\t\t\t\t\tlet tBin = tSplit.map( x => (x===\"0\") );\r\n\t\t\t\t\tresolve(tBin);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\txhr.open('GET', \"https://www.random.org/integers/?num=\"+ i +\"&min=0&max=1&col=1&base=10&format=plain&rnd=new\", true);\r\n\t\t// send the request\r\n\t\txhr.send();\r\n\t});\r\n}\r\n\r\nasync function getDeckRandomAsync(i) {\r\n\tvar xhr = new XMLHttpRequest();\r\n\treturn new Promise (function(resolve, reject) {\r\n\t\t\r\n\t\txhr.onreadystatechange = function() {\r\n\t\t\tif (xhr.readyState == 4) {\r\n\t\t\t\tif (xhr.Status >= 300) {\r\n\t\t\t\t\treject(\"Error, status code = \" + xhr.status)\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet tSplit = xhr.responseText.toString().trim().split(\"\\n\");\r\n\t\t\t\t\tlet tInt = tSplit.map( x => parseInt(x) );\r\n\t\t\t\t\tresolve(tInt);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\txhr.open('GET', \"https://www.random.org/sequences/?min=0&max=\"+i+\"&col=1&format=plain&rnd=new\", true);\r\n\t\t// send the request\r\n\t\txhr.send();\r\n\t});\r\n}\r\n\r\nfunction Card(props) {\r\n\r\n\tlet name = '';\r\n\t\r\n\tif (props.cardNo === -1) {\r\n\t\tname = 'back.jpg';\r\n\t}\r\n\telse if (props.cardNo === 10) {\r\n\t\tname = props.isUp ? 't10a.jpg' : 't10b.jpg';\r\n\t}\r\n\telse {\r\n\t\tname = 't' + props.cardNo + '.jpg'\r\n\t}\r\n\t\r\n\tname = \"img/\"+ name;\r\n\t\r\n\treturn (\r\n\t\t<img src={name} alt={name} height=\"200\"></img>\r\n\t);\r\n\t\t\r\n}\r\n\r\nclass Board extends React.Component {\r\n\trenderCard(i) {\r\n\t\treturn( <Card cardNo={this.props.cardNo[i]} isUp={this.props.isUp[i]} />  );\r\n\t}\r\n\t\r\n\trenderToken(i) {\r\n\t\treturn( this.props.isToken[i] ? <img src=\"img/token.jpg\" alt=\"*\" height=\"50\"></img> : \"\" );\r\n\t}\r\n\t\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<div class=\"container-fluid\">\r\n\t\t\t\t<div class=\"row text-center\">\r\n\t\t\t\t\t<div class=\"col-sm-2\"> {this.renderCard(0)} </div>\r\n\t\t\t\t\t<div class=\"col-sm-2\"> {this.renderCard(1)} </div>\r\n\t\t\t\t\t<div class=\"col-sm-2\"> {this.renderCard(2)} </div>\r\n\t\t\t\t\t<div class=\"col-sm-2\"> {this.renderCard(3)} </div>\r\n\t\t\t\t\t<div class=\"col-sm-2\"> {this.renderCard(4)} </div>\r\n\t\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\t\t<div class=\"row text-center\">\r\n\t\t\t\t\t<div class=\"col-sm-2\"> {this.renderToken(0)} </div>\r\n\t\t\t\t\t<div class=\"col-sm-2\"> {this.renderToken(1)} </div>\r\n\t\t\t\t\t<div class=\"col-sm-2\"> {this.renderToken(2)} </div>\r\n\t\t\t\t\t<div class=\"col-sm-2\"> {this.renderToken(3)} </div>\r\n\t\t\t\t\t<div class=\"col-sm-2\"> {this.renderToken(4)} </div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nclass TarotRead extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tcardNo: Array(5).fill(-1),\r\n\t\t\tisUp: Array(5).fill(true),\r\n\t\t\tisToken: Array(5).fill(false),\r\n\t\t\ttokenNo: 0,\r\n\t\t\ttimeRnd: 100,\r\n\t\t\trandomthings: 0,\r\n\t\t}\r\n\t}\r\n\t\r\n\trestartBoard() {\r\n\t\tthis.setState({\r\n\t\t\tcardNo: Array(5).fill(-1),\r\n\t\t\tisUp: Array(5).fill(true),\r\n\t\t\tisToken: Array(5).fill(false),\r\n\t\t\ttokenNo: 0,\r\n\t\t\ttimeRnd: 100,\r\n\t\t});\r\n\t}\r\n\t\r\n\t\r\n\tasync startReading() {\r\n\t\tlet tokenList = Array(5).fill(false);\r\n\t\tlet cardList = Array(5).fill(-1);\r\n\t\tlet upList = Array(5).fill(true);\r\n\t\t\r\n\t\t//let randomList = Array(51).fill(-1);\r\n\t\t//let binaryList = Array(6).fill(-1);\r\n\t\tlet tokenCard = 0;\r\n\t\t\r\n\t\tif (this.state.tokenNo===0) {\r\n\t\t\talert(\"Please select a token\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet i = 0;\r\n\t\t\t//let randomNo;\r\n\t\t\t\r\n\t\t\tlet binaryList = await getBitRandomAsync(6);\r\n\t\t\tlet randomList = await getDeckRandomAsync(49);\r\n\t\t\tconsole.log(await binaryList);\r\n\t\t\tconsole.log(await randomList);\r\n\t\t\t\r\n\r\n\t\r\n/* \t\t\twhile (i<7) { // This will be replaced by the call to RANDOM.ORG\r\n\t\t\t\trandomNo = Math.floor(Math.random() * 50);\r\n\t\t\t\tif (!randomList.includes(randomNo)) {\r\n\t\t\t\t\trandomList[i] = randomNo;\r\n\t\t\t\t\ti++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor (i=0; i<6; i++) { // This will be replaced by the call to RANDOM.ORG\r\n\t\t\t\tbinaryList[i] = Math.floor(Math.random() * 50) % 2;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tconsole.log(randomList);\r\n\t\t\tconsole.log(binaryList); */\r\n\t\t\t\r\n \t\t\t// type of the token\r\n\t\t\tlet typeToken = binaryList[5];\r\n\t\t\t\r\n\t\t\t// position of the token\r\n\t\t\tlet positionToken = randomList[49] % 5;\r\n\t\t\t\r\n\t\t\tif (this.state.tokenNo===1) {\r\n\t\t\t\ttokenCard = (typeToken===0) ? 25 : 24;\r\n\t\t\t}\r\n\t\t\telse if (this.state.tokenNo===2) {\r\n\t\t\t\ttokenCard = (typeToken===0) ? 26 : 23;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\talert(\"Please select a token\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tcardList[positionToken] = tokenCard;\r\n\t\t\tupList[positionToken] = (binaryList[positionToken]);\r\n\t\t\ttokenList[positionToken] = true;\r\n\t\t\t\r\n\t\t\t// Rest of the cards\r\n\t\t\tlet randomListIdx = 0;\r\n\t\t\tfor (i=0; i<positionToken; i++) { // 1st half\r\n\t\t\t\tif (randomList[randomListIdx]===tokenCard) { //skip!\r\n\t\t\t\t\trandomListIdx++;\r\n\t\t\t\t\tconsole.log(\"skip!\");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tcardList[i] = randomList[randomListIdx];\r\n\t\t\t\tupList[i] = (binaryList[i]);\r\n\t\t\t\trandomListIdx++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor (i=positionToken+1; i<5; i++) { // 2nd half\r\n\t\t\t\tif (randomList[randomListIdx]===tokenCard) { //skip!\r\n\t\t\t\t\trandomListIdx++;\r\n\t\t\t\t\tconsole.log(\"skip!\");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tcardList[i] = randomList[randomListIdx];\r\n\t\t\t\tupList[i] = (binaryList[i]);\r\n\t\t\t\trandomListIdx++;\r\n\t\t\t}\r\n\t\t\r\n\t\t\tthis.setState({isToken: tokenList, cardNo: cardList, isUp: upList})\r\n\t\t}\r\n\t\t\r\n\t\tconsole.log(\"reading!\");\r\n\t}\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div class=\"container-fluid\">\r\n\t\t\t\t<div class=\"row text-center\">\r\n\t\t\t\t\t<div class=\"col-sm-6\"> <img src=\"img/t25.jpg\" alt=\"King\" height=\"200\"></img></div>\r\n\t\t\t\t\t<div class=\"col-sm-6\"> <img src=\"img/t26.jpg\" alt=\"Queen\" height=\"200\"></img></div>\r\n\t\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\t\t<div class=\"row text-center\">\r\n\t\t\t\t\t<div class=\"col-sm-6\"> <button type=\"button\" class=\"btn\" onClick={() => this.setState({tokenNo: 1})}> {this.state.tokenNo===1 ? \"X\" : \"_\"} </button> </div>\r\n\t\t\t\t\t<div class=\"col-sm-6\"> <button type=\"button\" class=\"btn\" onClick={() => this.setState({tokenNo: 2})}> {this.state.tokenNo===2 ? \"X\" : \"_\"} </button></div>\r\n\t\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\t\t<div class=\"row text-center\">\r\n\t\t\t\t\t<button type=\"button\" class=\"btn btn-success\" onClick={() => this.startReading()}> Start </button> &emsp;\r\n\t\t\t\t\t<button type=\"button\" class=\"btn btn-warning\" onClick={() => this.restartBoard()}> Clear </button>\r\n\t\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\t\t<Board cardNo={this.state.cardNo} isUp={this.state.isUp} isToken={this.state.isToken}/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nReactDOM.render(<TarotRead />, document.getElementById(\"root\"));"],"sourceRoot":""}